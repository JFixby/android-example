apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven' // ADD THIS
apply plugin: 'eclipse'

group='com.github.jfixby'

repositories {
        	 maven { url 'https://jitpack.io' }
        	 mavenCentral()
        	 maven {url "https://maven.google.com"}
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 15
        versionCode 1
        versionName "1.0"
        consumerProguardFiles 'proguard-rules.pro'
    }
}

ext {
        gdxVersion = '1.9.6'
        scarabeiVersion = "6cdcc06c39"
}

eclipse {
    // need to specify Java source sets explicitly, SpringSource Gradle Eclipse plugin
    // ignores any nodes added in classpath.file.withXml
    sourceSets {
        main {
            java.srcDirs "src/main/java/"
        }
    }

    jdt {
        sourceCompatibility = 1.6
        targetCompatibility = 1.6
    }

    classpath {
        plusConfigurations += [project.configurations.compile]
        //containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'
    }

    project {
        name = "android-example-library"
        //natures 'com.android.ide.eclipse.adt.AndroidNature'
        //buildCommands.clear();
        //buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
        //buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
        //buildCommand "org.eclipse.jdt.core.javabuilder"
        //buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
    }
}

dependencies {
    // add dependencies here
     compile "com.github.Scarabei.Scarabei:scarabei-api:$scarabeiVersion"
     compile fileTree(dir: 'android-api', include: ['*.jar'])
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

// uncomment to build a jar file in addition to the default aar file
//android.libraryVariants.all { variant ->
//    def name = variant.buildType.name
//    def task = project.tasks.create "jar${name.capitalize()}", Jar
//    task.dependsOn variant.javaCompile
//    task.from variant.javaCompile.destinationDir
//    artifacts.add('archives', task);
//}

